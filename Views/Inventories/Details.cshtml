@model Inventory_Management_Requirements.Models.InventoryDetailsViewModel

@{
    ViewBag.Title = Model.Inventory.Title;
    Layout = "_Layout";
}

<div class="container mt-4">
    <h1>@Model.Inventory.Title</h1>
    <p>
        <span class="badge badge-@(Model.Inventory.IsPublic ? "success" : "secondary")">
            @(Model.Inventory.IsPublic ? "Public" : "Private") Inventory
        </span>
    </p>
    <p>@Html.Raw(Model.Inventory.Description)</p>

    <partial name="_Tabs" model="Model" />

    <div class="tab-content" id="inventoryTabsContent">
        <div class="tab-pane fade show active" id="items" role="tabpanel" aria-labelledby="items-tab">
            <partial name="~/Views/Items/_ItemList.cshtml" model="Model.Inventory.Items" />
        </div>
        <div class="tab-pane fade" id="chat" role="tabpanel" aria-labelledby="chat-tab">
            <partial name="~/Views/Inventories/_Chat.cshtml" model="Model.Comments" />
        </div>
        <div class="tab-pane fade" id="settings" role="tabpanel" aria-labelledby="settings-tab">
            @{
                ViewData["Categories"] = ViewBag.Categories;
            }
            <partial name="~/Views/Inventories/_Settings.cshtml" model="Model.Inventory" />
        </div>
        <div class="tab-pane fade" id="custom-id" role="tabpanel" aria-labelledby="custom-id-tab">
            <partial name="~/Views/CustomId/Index.cshtml" model="Model.Inventory.IdFormat" />
        </div>
    <div class="tab-pane fade" id="fields" role="tabpanel" aria-labelledby="fields-tab">
        <h3>Tags</h3>
        <input type="text" id="tag-input" class="form-control" placeholder="Search for tags..." />
        <ul id="tag-suggestions" class="list-group" style="display:none;"></ul>
        <partial name="~/Views/Fields/Index.cshtml" model="Model.Inventory.Fields" />
    </div>
    <div class="tab-pane fade" id="attachments" role="tabpanel" aria-labelledby="attachments-tab">
        <h3>Attachments</h3>
        @if (Model.Attachments != null && Model.Attachments.Count > 0)
        {
            <ul class="list-group">
                @foreach (var attachment in Model.Attachments)
                {
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        <a href="@attachment.FileUrl" target="_blank">@attachment.FileName</a>
                        <span class="badge bg-secondary">@attachment.FileType</span>
                    </li>
                }
            </ul>
        }
        else
        {
            <p>No attachments found.</p>
        }
    </div>
        <div class="tab-pane fade" id="access" role="tabpanel" aria-labelledby="access-tab">
            <partial name="~/Views/Access/Index.cshtml" model="Model.AccessList" view-data="ViewData" />
        </div>
        <div class="tab-pane fade" id="stats" role="tabpanel" aria-labelledby="stats-tab">
            <partial name="~/Views/Stats/Index.cshtml" model="Model.Inventory" />
        </div>
        <div class="tab-pane fade" id="export" role="tabpanel" aria-labelledby="export-tab">
            <partial name="~/Views/Export/Index.cshtml" model="Model.Inventory" />
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/js/drag-drop.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const tagInput = document.getElementById('tag-input');
            const tagSuggestions = document.getElementById('tag-suggestions');

            tagInput.addEventListener('input', function() {
                const term = this.value.trim();
                
                if (term.length < 2) {
                    tagSuggestions.style.display = 'none';
                    return;
                }

                // Fetch tag suggestions from the server
                fetch(`/Inventories/GetTagSuggestions?term=${encodeURIComponent(term)}`)
                    .then(response => response.json())
                    .then(tags => {
                        if (tags.length > 0) {
                            tagSuggestions.innerHTML = '';
                            tags.forEach(tag => {
                                const li = document.createElement('li');
                                li.className = 'list-group-item list-group-item-action';
                                li.textContent = tag;
                                li.addEventListener('click', function() {
                                    tagInput.value = tag;
                                    tagSuggestions.style.display = 'none';
                                });
                                tagSuggestions.appendChild(li);
                            });
                            tagSuggestions.style.display = 'block';
                        } else {
                            tagSuggestions.style.display = 'none';
                        }
                    })
                    .catch(error => {
                        console.error('Error fetching tag suggestions:', error);
                        tagSuggestions.style.display = 'none';
                    });
            });

            // Hide suggestions when clicking outside
            document.addEventListener('click', function(event) {
                if (!tagInput.contains(event.target) && !tagSuggestions.contains(event.target)) {
                    tagSuggestions.style.display = 'none';
                }
            });
        });
    </script>
}
